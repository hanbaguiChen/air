package com.cnmts.common.listener;

import java.io.File;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.cnmts.common.bean.SystemConfig;
import com.cnmts.data.service.NativeDataServiceImpl;

/**
 * 启动监听器<br />
 * 1,初始化系统参数<br />
 * 2,初始化报警参数<br />
 * 
 * @author 王璞
 * @date 2016年6月8日 下午2:47:32
 * @version 1.0
 */
@Service
@Configuration
@PropertySource("classpath:system.properties")
public class SystemStartLister implements ApplicationListener<ApplicationEvent> {

	private Logger logger = Logger.getLogger(SystemStartLister.class);

	@Autowired
	private Environment env;

	@Autowired
	private NativeDataServiceImpl nativeDataService;

	@Override
	public void onApplicationEvent(ApplicationEvent event) {
		logger.error("onApplicationEvent   " + event.getClass());

		if (event instanceof ContextRefreshedEvent) {// 启动
			initSystemConfig();
			initAlarmSetting();
			initJni();
		}
		if (event instanceof ContextClosedEvent) {// 关闭
			nativeDataService.destory();
		}
	}

	/**
	 * 初始化JNI部分
	 * 
	 * @author 王璞
	 * @date 2017年1月19日 上午11:49:42
	 */
	private void initJni() {
		System.loadLibrary("mNetServer");
		String logPath = System.getProperty("catalina.home") + "\\mts_air_brake_logs";
		nativeDataService.init(8015, logPath, nativeDataService);
		nativeDataService.initData();
	}

	/**
	 * 初始化系统基本参数
	 * 
	 * @author 王璞
	 * @date 2017年1月11日 上午9:50:38
	 */
	private void initSystemConfig() {
		String strFormat = "%s---%s";
		// FFMPEG配置
		SystemConfig.ffmpegPath = env.getProperty("ffmpeg.path");
		SystemConfig.ffmpegResolution = env.getProperty("ffmpeg.resolution");

		logger.info(String.format(strFormat, "ffmpeg配置", "ffmpegPath= " + SystemConfig.ffmpegPath + "  ffmpegResolution="
				+ SystemConfig.ffmpegResolution));

		// 项目根路径
		SystemConfig.projectRootPath = System.getProperty(env.getProperty("webAppRootKey"));
		// 文件保存目录配置
		String fileSavePath = env.getProperty("file.savePath");
		if (StringUtils.isEmpty(fileSavePath) || StringUtils.equalsIgnoreCase(fileSavePath, "auto")) {
			fileSavePath = SystemConfig.projectRootPath;
		}
		SystemConfig.fileSavePath = fileSavePath;
		logger.info(String.format(strFormat, "文件配置", "保存路径为   " + fileSavePath + "  项目根路径为" + SystemConfig.projectRootPath));

		String maxAge = env.getProperty("token.maxAge");
		if (maxAge != null && NumberUtils.isParsable(maxAge)) {
			SystemConfig.tokenMaxAge = Integer.parseInt(maxAge);
		}
	}

	/**
	 * 初始化报警信息配置
	 * 
	 * @author 王璞
	 * @date 2017年1月11日 上午9:40:43
	 */
	private void initAlarmSetting() {
		// 读取报警配置
		try {
			SystemConfig.alarmMap.clear();
			String readFileToString = FileUtils.readFileToString(new File(SystemConfig.projectRootPath, "WEB-INF/classes/alarm.txt"),
					"UTF-8");
			if (StringUtils.isNotEmpty(readFileToString)) {
				String[] alarmArr = readFileToString.split(";");
				if (alarmArr != null) {
					for (String alarmStr : alarmArr) {
						String[] alarm = alarmStr.split(":");
						if (alarm != null && alarm.length >= 2) {
							if (NumberUtils.isParsable(alarm[0])) {
								SystemConfig.alarmMap.put(NumberUtils.toInt(alarm[0]), alarm[1]);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logger.error("读取报警配置文件出错", e);
		}
	}
}
