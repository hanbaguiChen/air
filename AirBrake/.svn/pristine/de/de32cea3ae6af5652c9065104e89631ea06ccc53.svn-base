package com.cnmts.common.listener;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.cnmts.common.bean.SystemConfig;

/**
 * 启动监听器<br />
 * 1,初始化系统参数
 * 
 * @author 王璞
 * @date 2016年6月8日 下午2:47:32
 * @version 1.0
 */
@Service
@Configuration
@PropertySource("classpath:system.properties")
public class SystemStartLister implements ApplicationListener<ApplicationEvent> {

	private Logger logger = Logger.getLogger(SystemStartLister.class);

	@Autowired
	private Environment env;

	@Override
	public void onApplicationEvent(ApplicationEvent event) {
		String strFormat = "%s---%s";
		if (event instanceof ContextRefreshedEvent) {// 启动
			// FFMPEG配置
			SystemConfig.ffmpegPath = env.getProperty("ffmpeg.path");
			SystemConfig.ffmpegResolution = env.getProperty("ffmpeg.resolution");

			logger.info(String.format(strFormat, "ffmpeg配置", "ffmpegPath= " + SystemConfig.ffmpegPath + "  ffmpegResolution="
					+ SystemConfig.ffmpegResolution));

			// 文件保存目录配置
			String fileSavePath = env.getProperty("file.savePath");
			if (StringUtils.isEmpty(fileSavePath) || StringUtils.equalsIgnoreCase(fileSavePath, "auto")) {
				String webAppRootKey = env.getProperty("webAppRootKey");
				fileSavePath = System.getProperty(webAppRootKey);
			}
			SystemConfig.fileSavePath = fileSavePath;
			logger.info(String.format(strFormat, "文件配置", "保存路径为   " + fileSavePath));

			String maxAge = env.getProperty("token.maxAge");
			if (maxAge != null && NumberUtils.isParsable(maxAge)) {
				SystemConfig.tokenMaxAge = Integer.parseInt(maxAge);
			}

		}
		if (event instanceof ContextClosedEvent) {// 关闭
			// 停掉线程池
		}
	}
}
