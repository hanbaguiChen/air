package com.cnmts.baseinfo.controller;

import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cnmts.baseinfo.exception.CarAlreadPlaitException;
import com.cnmts.baseinfo.exception.CarNotExistException;
import com.cnmts.baseinfo.exception.TrainHasNotUntieException;
import com.cnmts.baseinfo.service.TrainService;
import com.cnmts.common.bean.Attachment;
import com.cnmts.common.bean.JsonResult;
import com.cnmts.common.bean.ResultType;
import com.cnmts.common.exception.InvalidDataException;
import com.cnmts.common.service.FileService;
import com.cnmts.common.util.SessionUtil;
import com.cnmts.data.bean.NetWorkFeedback;
import com.cnmts.traffic.bean.Train;

@Controller
@RequestMapping(value = { "/train" })
public class TrainController {

	@Autowired
	private TrainService trainService;

	@Autowired
	private FileService fileService;

	/**
	 * 导入Excel
	 * 
	 * @author 王璞
	 * @date 2017年1月17日 下午2:47:50
	 * @param multipartFile
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = { "/importTrainGroup" })
	@ResponseBody
	public JsonResult<Map<String, Object>> importTrainGroup(@RequestParam(name = "file") MultipartFile multipartFile) throws Exception {

		JsonResult<Map<String, Object>> jsonResult = new JsonResult<Map<String, Object>>();
		Attachment saveTempFile = fileService.saveTempFile(multipartFile);

		Map<String, Object> map = trainService.importTrainGroup(saveTempFile);

		jsonResult.setObj(map);

		return jsonResult;
	}

	/**
	 * 保存编组信息
	 * 
	 * @author 王璞
	 * @date 2017年1月17日 下午4:09:00
	 * @param train
	 * @return
	 * @throws InvalidDataException
	 */
	@RequestMapping(value = { "/saveTrainGroup" })
	@ResponseBody
	public JsonResult<?> saveTrainGroup(@RequestBody Train train) throws InvalidDataException {
		if (train == null || train.getCars() == null || train.getCars().size() <= 0) {
			throw new InvalidDataException();
		}
		JsonResult<Boolean> jsonResult = new JsonResult<Boolean>();
		try {
			trainService.saveTrainGroup(train);
			jsonResult.setObj(true);
		} catch (TrainHasNotUntieException e) {// 列车未解编
			jsonResult.setCode(ResultType.TRAIN_HASNOT_UNITE);
		} catch (CarNotExistException e) {// 车厢不存在
			jsonResult.setCode(ResultType.CAR_NOT_EXIST);
		} catch (CarAlreadPlaitException e) {// 车厢已编组
			return new JsonResult<String>(e.getCarNo() + " 已经编组在" + e.getTrainName() + "中").setCode(ResultType.CAR_ALREAD_PLAIT);
		}
		return jsonResult;
	}

	/**
	 * 组网
	 * 
	 * @author 王璞
	 * @date 2017年1月22日 上午9:27:37
	 * @return
	 * @throws InvalidDataException
	 */
	@RequestMapping(value = { "/buildNetWork" })
	@ResponseBody
	public JsonResult<Integer> buildNetWork(int trainId) throws InvalidDataException {
		if (trainId <= 0) {
			throw new InvalidDataException();
		}
		int msgNo = trainService.buildNetWork(trainId);
		SessionUtil.setBuildNetWorkMsgNo(trainId, msgNo);
		return new JsonResult<Integer>().setObj(msgNo);
	}

	/**
	 * 解网
	 * 
	 * @author 王璞
	 * @date 2017年2月6日 上午10:12:52
	 * @param trainId
	 * @param session
	 * @return
	 * @throws InvalidDataException
	 */
	@RequestMapping(value = { "/destoryNetWork" })
	@ResponseBody
	public JsonResult<Integer> destoryNetWork(int trainId, HttpSession session) throws InvalidDataException {
		if (trainId <= 0) {
			throw new InvalidDataException();
		}
		int msgNo = trainService.destoryNetWork(trainId);
		SessionUtil.setDestoryNetWorkMsgNo(trainId, msgNo);
		return new JsonResult<Integer>().setObj(msgNo);
	}

	/**
	 * 查询组网/解网进度
	 * 
	 * @author 王璞
	 * @date 2017年1月22日 上午10:56:18
	 * @param trainId
	 * @param msgNo
	 * @return
	 * @throws InvalidDataException
	 */
	@RequestMapping(value = { "/getNetWorkFeedback" })
	@ResponseBody
	public JsonResult<NetWorkFeedback> getNetWorkFeedback(int trainId, @RequestParam(defaultValue = "-1") int msgNo, int flag)
			throws InvalidDataException {
		if (msgNo == -1 && trainId <= 0) {
			throw new InvalidDataException();
		}
		if (msgNo == -1) {
			if (flag == 1) {// 组网
				msgNo = SessionUtil.getBuildNetWorkMsgNo(trainId);
			} else {// 解网
				msgNo = SessionUtil.getDestoryNetWorkMsgNo(trainId);
			}
		}
		if (msgNo <= 0) {
			// TODO 不存在
		}
		NetWorkFeedback netWorkFeedback = trainService.getNetWorkFeedback(msgNo);
		return new JsonResult<NetWorkFeedback>(netWorkFeedback);
	}
}
